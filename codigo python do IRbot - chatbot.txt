# Instale a biblioteca necess√°ria para usar o modelo Gemini da Google
!pip install -q google-generativeai

# Importa o m√≥dulo principal da biblioteca Gemini
import google.generativeai as genai

# Importa fun√ß√µes para exibir mensagens com formata√ß√£o Markdown no Google Colab
from IPython.display import display, Markdown

# Importa bibliotecas do sistema operacional e do Google Colab para ler a chave da API com seguran√ßa
import os
from google.colab import userdata 

# Define a vari√°vel de ambiente com a chave da API, buscando do armazenamento seguro do Colab (userdata)
os.environ['GOOGLE_API_KEY'] = userdata.get('GOOGLE_API_KEY')

# Configura o modelo generativo da Google com a chave de API informada
genai.configure(api_key=os.environ['GOOGLE_API_KEY'])

# Inicializa o modelo Gemini usando a vers√£o "gemini-2.0-flash"
model = genai.GenerativeModel(model_name="gemini-2.0-flash")

# Define a fun√ß√£o que recebe uma pergunta e um hist√≥rico de conversa 

def chat_ir_bot(pergunta, history=[]):
    
    # Cria uma nova conversa com base no hist√≥rico anterior (se houver)
    chat = model.start_chat(history=history)
    
    # Cria o prompt com instru√ß√µes para a IA se comportar como um assistente educacional sobre IR
    prompt = f"""
    Voc√™ √© um assistente virtual que ajuda pessoas a entender o Imposto de Renda Pessoa F√≠sica (IRPF) no Brasil.  
    Explique de forma simples e direta, como se estivesse conversando com algu√©m que n√£o entende nada do assunto.  
    Evite termos t√©cnicos sempre que poss√≠vel e n√£o d√™ conselhos ilegais.  
    Seja claro, confi√°vel e educativo em todas as respostas.
    Pergunta: {pergunta}
    """
    
    # Envia o prompt ao modelo Gemini e recebe a resposta
    resposta = chat.send_message(prompt)

    # Retorna o texto da resposta e o hist√≥rico da conversa atualizado
    return resposta.text, chat.history

# Inicializa o hist√≥rico de conversa como uma lista vazia
history = []

# Mensagem de boas-vindas
print("üí∞ IRBot: Ol√°! Sou seu assistente para d√∫vidas sobre o Imposto de Renda. Como posso ajudar?\n")

# Inicia um loop infinito para manter o chat funcionando at√© o usu√°rio digitar "sair"

while True:
    # L√™ a pergunta do usu√°rio
    pergunta = input("Voc√™: ")

    # Se o usu√°rio digitar sair, exit ou fim (em qualquer capitaliza√ß√£o), o chatbot encerra
    if pergunta.lower() in ["sair", "exit", "fim"]:
        print("üí∞ IRBot: At√© mais! Lembre-se de declarar dentro do prazo üòâ")
        break

    # Chama a fun√ß√£o do chatbot, passando a pergunta e o hist√≥rico da conversa
    resposta, history = chat_ir_bot(pergunta, history)

    # Exibe a resposta formatada em Markdown (negrito com emoji)
    display(Markdown(f"**üí∞ IRBot:** {resposta}"))